// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: chain_service.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XChainClient is the client API for XChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XChainClient interface {
	// 示例接口
	CheckAlive(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 提交交易
	SubmitTx(ctx context.Context, in *SubmitTxReq, opts ...grpc.CallOption) (*BaseResp, error)
	// 合约预执行
	PreExec(ctx context.Context, in *PreExecReq, opts ...grpc.CallOption) (*PreExecResp, error)
	// 选择utxo
	SelectUtxo(ctx context.Context, in *SelectUtxoReq, opts ...grpc.CallOption) (*SelectUtxoResp, error)
	// 查询交易信息
	QueryTx(ctx context.Context, in *QueryTxReq, opts ...grpc.CallOption) (*QueryTxResp, error)
	// 查询区块信息
	QueryBlock(ctx context.Context, in *QueryBlockReq, opts ...grpc.CallOption) (*QueryBlockResp, error)
	// 查询区块链状态
	QueryChainStatus(ctx context.Context, in *QueryChainStatusReq, opts ...grpc.CallOption) (*QueryChainStatusResp, error)
}

type xChainClient struct {
	cc grpc.ClientConnInterface
}

func NewXChainClient(cc grpc.ClientConnInterface) XChainClient {
	return &xChainClient{cc}
}

func (c *xChainClient) CheckAlive(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/CheckAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xChainClient) SubmitTx(ctx context.Context, in *SubmitTxReq, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/SubmitTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xChainClient) PreExec(ctx context.Context, in *PreExecReq, opts ...grpc.CallOption) (*PreExecResp, error) {
	out := new(PreExecResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/PreExec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xChainClient) SelectUtxo(ctx context.Context, in *SelectUtxoReq, opts ...grpc.CallOption) (*SelectUtxoResp, error) {
	out := new(SelectUtxoResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/SelectUtxo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xChainClient) QueryTx(ctx context.Context, in *QueryTxReq, opts ...grpc.CallOption) (*QueryTxResp, error) {
	out := new(QueryTxResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/QueryTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xChainClient) QueryBlock(ctx context.Context, in *QueryBlockReq, opts ...grpc.CallOption) (*QueryBlockResp, error) {
	out := new(QueryBlockResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/QueryBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xChainClient) QueryChainStatus(ctx context.Context, in *QueryChainStatusReq, opts ...grpc.CallOption) (*QueryChainStatusResp, error) {
	out := new(QueryChainStatusResp)
	err := c.cc.Invoke(ctx, "/protos.XChain/QueryChainStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XChainServer is the server API for XChain service.
// All implementations should embed UnimplementedXChainServer
// for forward compatibility
type XChainServer interface {
	// 示例接口
	CheckAlive(context.Context, *BaseReq) (*BaseResp, error)
	// 提交交易
	SubmitTx(context.Context, *SubmitTxReq) (*BaseResp, error)
	// 合约预执行
	PreExec(context.Context, *PreExecReq) (*PreExecResp, error)
	// 选择utxo
	SelectUtxo(context.Context, *SelectUtxoReq) (*SelectUtxoResp, error)
	// 查询交易信息
	QueryTx(context.Context, *QueryTxReq) (*QueryTxResp, error)
	// 查询区块信息
	QueryBlock(context.Context, *QueryBlockReq) (*QueryBlockResp, error)
	// 查询区块链状态
	QueryChainStatus(context.Context, *QueryChainStatusReq) (*QueryChainStatusResp, error)
}

// UnimplementedXChainServer should be embedded to have forward compatible implementations.
type UnimplementedXChainServer struct {
}

func (UnimplementedXChainServer) CheckAlive(context.Context, *BaseReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAlive not implemented")
}
func (UnimplementedXChainServer) SubmitTx(context.Context, *SubmitTxReq) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTx not implemented")
}
func (UnimplementedXChainServer) PreExec(context.Context, *PreExecReq) (*PreExecResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreExec not implemented")
}
func (UnimplementedXChainServer) SelectUtxo(context.Context, *SelectUtxoReq) (*SelectUtxoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUtxo not implemented")
}
func (UnimplementedXChainServer) QueryTx(context.Context, *QueryTxReq) (*QueryTxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTx not implemented")
}
func (UnimplementedXChainServer) QueryBlock(context.Context, *QueryBlockReq) (*QueryBlockResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryBlock not implemented")
}
func (UnimplementedXChainServer) QueryChainStatus(context.Context, *QueryChainStatusReq) (*QueryChainStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChainStatus not implemented")
}

// UnsafeXChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XChainServer will
// result in compilation errors.
type UnsafeXChainServer interface {
	mustEmbedUnimplementedXChainServer()
}

func RegisterXChainServer(s grpc.ServiceRegistrar, srv XChainServer) {
	s.RegisterService(&XChain_ServiceDesc, srv)
}

func _XChain_CheckAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).CheckAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/CheckAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).CheckAlive(ctx, req.(*BaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XChain_SubmitTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).SubmitTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/SubmitTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).SubmitTx(ctx, req.(*SubmitTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XChain_PreExec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreExecReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).PreExec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/PreExec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).PreExec(ctx, req.(*PreExecReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XChain_SelectUtxo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUtxoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).SelectUtxo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/SelectUtxo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).SelectUtxo(ctx, req.(*SelectUtxoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XChain_QueryTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).QueryTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/QueryTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).QueryTx(ctx, req.(*QueryTxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XChain_QueryBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBlockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).QueryBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/QueryBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).QueryBlock(ctx, req.(*QueryBlockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XChain_QueryChainStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChainStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XChainServer).QueryChainStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.XChain/QueryChainStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XChainServer).QueryChainStatus(ctx, req.(*QueryChainStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// XChain_ServiceDesc is the grpc.ServiceDesc for XChain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XChain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.XChain",
	HandlerType: (*XChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAlive",
			Handler:    _XChain_CheckAlive_Handler,
		},
		{
			MethodName: "SubmitTx",
			Handler:    _XChain_SubmitTx_Handler,
		},
		{
			MethodName: "PreExec",
			Handler:    _XChain_PreExec_Handler,
		},
		{
			MethodName: "SelectUtxo",
			Handler:    _XChain_SelectUtxo_Handler,
		},
		{
			MethodName: "QueryTx",
			Handler:    _XChain_QueryTx_Handler,
		},
		{
			MethodName: "QueryBlock",
			Handler:    _XChain_QueryBlock_Handler,
		},
		{
			MethodName: "QueryChainStatus",
			Handler:    _XChain_QueryChainStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain_service.proto",
}
