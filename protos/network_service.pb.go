// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: network_service.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoreMessage_MessageType int32

const (
	CoreMessage_SENDBLOCK                CoreMessage_MessageType = 0
	CoreMessage_POSTTX                   CoreMessage_MessageType = 1
	CoreMessage_BATCHPOSTTX              CoreMessage_MessageType = 2
	CoreMessage_GET_BLOCK                CoreMessage_MessageType = 3
	CoreMessage_PING                     CoreMessage_MessageType = 4
	CoreMessage_GET_BLOCKCHAINSTATUS     CoreMessage_MessageType = 5
	CoreMessage_GET_BLOCK_RES            CoreMessage_MessageType = 6
	CoreMessage_GET_BLOCKCHAINSTATUS_RES CoreMessage_MessageType = 7
	// 向邻近确认区块是否为最新状态区块
	CoreMessage_CONFIRM_BLOCKCHAINSTATUS     CoreMessage_MessageType = 8
	CoreMessage_CONFIRM_BLOCKCHAINSTATUS_RES CoreMessage_MessageType = 9
	CoreMessage_MSG_TYPE_NONE                CoreMessage_MessageType = 10
	// query RPC port information
	CoreMessage_GET_RPC_PORT     CoreMessage_MessageType = 11
	CoreMessage_GET_RPC_PORT_RES CoreMessage_MessageType = 12
	// get authentication information
	CoreMessage_GET_AUTHENTICATION     CoreMessage_MessageType = 13
	CoreMessage_GET_AUTHENTICATION_RES CoreMessage_MessageType = 14
	// chained-bft NEW_VIEW message
	CoreMessage_CHAINED_BFT_NEW_VIEW_MSG CoreMessage_MessageType = 15
	// chained-bft NEW_PROPOSAL message
	CoreMessage_CHAINED_BFT_NEW_PROPOSAL_MSG CoreMessage_MessageType = 16
	// chained-bft vote message
	CoreMessage_CHAINED_BFT_VOTE_MSG CoreMessage_MessageType = 17
	// broadcast new block id to other node
	CoreMessage_NEW_BLOCKID CoreMessage_MessageType = 18
	// new node used to add to network automatic
	CoreMessage_NEW_NODE CoreMessage_MessageType = 19
	// 消息头同步对(GET_HASHES <-> HASHES),
	// 发送方通过GET_HASHES消息询问区间范围内的所有区块哈希信息,
	// 接受方发送HASHES信息, 该消息携带其所知的区间范围内的BlockId列表
	CoreMessage_GET_BLOCKIDS     CoreMessage_MessageType = 20
	CoreMessage_GET_BLOCKIDS_RES CoreMessage_MessageType = 21
	// 消息对(GET_BLOCKS <-> BLOCKS),
	// 发送方通过GET_BLOCKS消息询问BlockId列表内的所有对应区块信息,
	// 接受方发送BLOCKS信息, 该消息携带具体Block
	CoreMessage_GET_BLOCKS             CoreMessage_MessageType = 22
	CoreMessage_GET_BLOCKS_RES         CoreMessage_MessageType = 23
	CoreMessage_GET_PEER_INFO          CoreMessage_MessageType = 24
	CoreMessage_GET_PEER_INFO_RES      CoreMessage_MessageType = 25
	CoreMessage_GET_BLOCK_HEADERS      CoreMessage_MessageType = 26
	CoreMessage_GET_BLOCKS_HEADERS_RES CoreMessage_MessageType = 27
	CoreMessage_GET_BLOCK_TXS          CoreMessage_MessageType = 28
	CoreMessage_GET_BLOCKS_TXS_RES     CoreMessage_MessageType = 29
)

// Enum value maps for CoreMessage_MessageType.
var (
	CoreMessage_MessageType_name = map[int32]string{
		0:  "SENDBLOCK",
		1:  "POSTTX",
		2:  "BATCHPOSTTX",
		3:  "GET_BLOCK",
		4:  "PING",
		5:  "GET_BLOCKCHAINSTATUS",
		6:  "GET_BLOCK_RES",
		7:  "GET_BLOCKCHAINSTATUS_RES",
		8:  "CONFIRM_BLOCKCHAINSTATUS",
		9:  "CONFIRM_BLOCKCHAINSTATUS_RES",
		10: "MSG_TYPE_NONE",
		11: "GET_RPC_PORT",
		12: "GET_RPC_PORT_RES",
		13: "GET_AUTHENTICATION",
		14: "GET_AUTHENTICATION_RES",
		15: "CHAINED_BFT_NEW_VIEW_MSG",
		16: "CHAINED_BFT_NEW_PROPOSAL_MSG",
		17: "CHAINED_BFT_VOTE_MSG",
		18: "NEW_BLOCKID",
		19: "NEW_NODE",
		20: "GET_BLOCKIDS",
		21: "GET_BLOCKIDS_RES",
		22: "GET_BLOCKS",
		23: "GET_BLOCKS_RES",
		24: "GET_PEER_INFO",
		25: "GET_PEER_INFO_RES",
		26: "GET_BLOCK_HEADERS",
		27: "GET_BLOCKS_HEADERS_RES",
		28: "GET_BLOCK_TXS",
		29: "GET_BLOCKS_TXS_RES",
	}
	CoreMessage_MessageType_value = map[string]int32{
		"SENDBLOCK":                    0,
		"POSTTX":                       1,
		"BATCHPOSTTX":                  2,
		"GET_BLOCK":                    3,
		"PING":                         4,
		"GET_BLOCKCHAINSTATUS":         5,
		"GET_BLOCK_RES":                6,
		"GET_BLOCKCHAINSTATUS_RES":     7,
		"CONFIRM_BLOCKCHAINSTATUS":     8,
		"CONFIRM_BLOCKCHAINSTATUS_RES": 9,
		"MSG_TYPE_NONE":                10,
		"GET_RPC_PORT":                 11,
		"GET_RPC_PORT_RES":             12,
		"GET_AUTHENTICATION":           13,
		"GET_AUTHENTICATION_RES":       14,
		"CHAINED_BFT_NEW_VIEW_MSG":     15,
		"CHAINED_BFT_NEW_PROPOSAL_MSG": 16,
		"CHAINED_BFT_VOTE_MSG":         17,
		"NEW_BLOCKID":                  18,
		"NEW_NODE":                     19,
		"GET_BLOCKIDS":                 20,
		"GET_BLOCKIDS_RES":             21,
		"GET_BLOCKS":                   22,
		"GET_BLOCKS_RES":               23,
		"GET_PEER_INFO":                24,
		"GET_PEER_INFO_RES":            25,
		"GET_BLOCK_HEADERS":            26,
		"GET_BLOCKS_HEADERS_RES":       27,
		"GET_BLOCK_TXS":                28,
		"GET_BLOCKS_TXS_RES":           29,
	}
)

func (x CoreMessage_MessageType) Enum() *CoreMessage_MessageType {
	p := new(CoreMessage_MessageType)
	*p = x
	return p
}

func (x CoreMessage_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreMessage_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_proto_enumTypes[0].Descriptor()
}

func (CoreMessage_MessageType) Type() protoreflect.EnumType {
	return &file_network_service_proto_enumTypes[0]
}

func (x CoreMessage_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreMessage_MessageType.Descriptor instead.
func (CoreMessage_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{0, 0}
}

type CoreMessage_ErrorType int32

const (
	// success
	CoreMessage_SUCCESS CoreMessage_ErrorType = 0
	CoreMessage_NONE    CoreMessage_ErrorType = 1
	// common error
	CoreMessage_UNKNOW_ERROR             CoreMessage_ErrorType = 2
	CoreMessage_CHECK_SUM_ERROR          CoreMessage_ErrorType = 3
	CoreMessage_UNMARSHAL_MSG_BODY_ERROR CoreMessage_ErrorType = 4
	CoreMessage_CONNECT_REFUSE           CoreMessage_ErrorType = 5
	// block error
	CoreMessage_GET_BLOCKCHAIN_ERROR           CoreMessage_ErrorType = 6
	CoreMessage_BLOCKCHAIN_NOTEXIST            CoreMessage_ErrorType = 7
	CoreMessage_GET_BLOCK_ERROR                CoreMessage_ErrorType = 8
	CoreMessage_CONFIRM_BLOCKCHAINSTATUS_ERROR CoreMessage_ErrorType = 9
	CoreMessage_GET_AUTHENTICATION_ERROR       CoreMessage_ErrorType = 10
	CoreMessage_GET_AUTHENTICATION_NOT_PASS    CoreMessage_ErrorType = 11
)

// Enum value maps for CoreMessage_ErrorType.
var (
	CoreMessage_ErrorType_name = map[int32]string{
		0:  "SUCCESS",
		1:  "NONE",
		2:  "UNKNOW_ERROR",
		3:  "CHECK_SUM_ERROR",
		4:  "UNMARSHAL_MSG_BODY_ERROR",
		5:  "CONNECT_REFUSE",
		6:  "GET_BLOCKCHAIN_ERROR",
		7:  "BLOCKCHAIN_NOTEXIST",
		8:  "GET_BLOCK_ERROR",
		9:  "CONFIRM_BLOCKCHAINSTATUS_ERROR",
		10: "GET_AUTHENTICATION_ERROR",
		11: "GET_AUTHENTICATION_NOT_PASS",
	}
	CoreMessage_ErrorType_value = map[string]int32{
		"SUCCESS":                        0,
		"NONE":                           1,
		"UNKNOW_ERROR":                   2,
		"CHECK_SUM_ERROR":                3,
		"UNMARSHAL_MSG_BODY_ERROR":       4,
		"CONNECT_REFUSE":                 5,
		"GET_BLOCKCHAIN_ERROR":           6,
		"BLOCKCHAIN_NOTEXIST":            7,
		"GET_BLOCK_ERROR":                8,
		"CONFIRM_BLOCKCHAINSTATUS_ERROR": 9,
		"GET_AUTHENTICATION_ERROR":       10,
		"GET_AUTHENTICATION_NOT_PASS":    11,
	}
)

func (x CoreMessage_ErrorType) Enum() *CoreMessage_ErrorType {
	p := new(CoreMessage_ErrorType)
	*p = x
	return p
}

func (x CoreMessage_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreMessage_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_proto_enumTypes[1].Descriptor()
}

func (CoreMessage_ErrorType) Type() protoreflect.EnumType {
	return &file_network_service_proto_enumTypes[1]
}

func (x CoreMessage_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoreMessage_ErrorType.Descriptor instead.
func (CoreMessage_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{0, 1}
}

// CoreMessage is the message of core p2p server
type CoreMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *CoreMessage_MessageHeader `protobuf:"bytes,1,opt,name=Header,proto3" json:"Header,omitempty"`
	Data   *CoreMessage_MessageData   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (x *CoreMessage) Reset() {
	*x = CoreMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMessage) ProtoMessage() {}

func (x *CoreMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMessage.ProtoReflect.Descriptor instead.
func (*CoreMessage) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{0}
}

func (x *CoreMessage) GetHeader() *CoreMessage_MessageHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CoreMessage) GetData() *CoreMessage_MessageData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PeerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Account string      `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Peer    []*PeerInfo `protobuf:"bytes,4,rep,name=peer,proto3" json:"peer,omitempty"`
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{1}
}

func (x *PeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *PeerInfo) GetPeer() []*PeerInfo {
	if x != nil {
		return x.Peer
	}
	return nil
}

// MessageHeader is the message header of Xuper p2p server
type CoreMessage_MessageHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version        string                  `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Logid          string                  `protobuf:"bytes,2,opt,name=logid,proto3" json:"logid,omitempty"`
	From           string                  `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Bcname         string                  `protobuf:"bytes,4,opt,name=bcname,proto3" json:"bcname,omitempty"`
	Type           CoreMessage_MessageType `protobuf:"varint,5,opt,name=type,proto3,enum=protos.CoreMessage_MessageType" json:"type,omitempty"`
	DataCheckSum   uint32                  `protobuf:"varint,6,opt,name=dataCheckSum,proto3" json:"dataCheckSum,omitempty"`
	ErrorType      CoreMessage_ErrorType   `protobuf:"varint,7,opt,name=errorType,proto3,enum=protos.CoreMessage_ErrorType" json:"errorType,omitempty"`
	EnableCompress bool                    `protobuf:"varint,8,opt,name=enableCompress,proto3" json:"enableCompress,omitempty"`
}

func (x *CoreMessage_MessageHeader) Reset() {
	*x = CoreMessage_MessageHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMessage_MessageHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMessage_MessageHeader) ProtoMessage() {}

func (x *CoreMessage_MessageHeader) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMessage_MessageHeader.ProtoReflect.Descriptor instead.
func (*CoreMessage_MessageHeader) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CoreMessage_MessageHeader) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CoreMessage_MessageHeader) GetLogid() string {
	if x != nil {
		return x.Logid
	}
	return ""
}

func (x *CoreMessage_MessageHeader) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CoreMessage_MessageHeader) GetBcname() string {
	if x != nil {
		return x.Bcname
	}
	return ""
}

func (x *CoreMessage_MessageHeader) GetType() CoreMessage_MessageType {
	if x != nil {
		return x.Type
	}
	return CoreMessage_SENDBLOCK
}

func (x *CoreMessage_MessageHeader) GetDataCheckSum() uint32 {
	if x != nil {
		return x.DataCheckSum
	}
	return 0
}

func (x *CoreMessage_MessageHeader) GetErrorType() CoreMessage_ErrorType {
	if x != nil {
		return x.ErrorType
	}
	return CoreMessage_SUCCESS
}

func (x *CoreMessage_MessageHeader) GetEnableCompress() bool {
	if x != nil {
		return x.EnableCompress
	}
	return false
}

// MessageData is the message data of Xuper p2p server
type CoreMessage_MessageData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// msgInfo is the message infomation, use protobuf coding style
	MsgInfo []byte `protobuf:"bytes,3,opt,name=msgInfo,proto3" json:"msgInfo,omitempty"`
}

func (x *CoreMessage_MessageData) Reset() {
	*x = CoreMessage_MessageData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMessage_MessageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMessage_MessageData) ProtoMessage() {}

func (x *CoreMessage_MessageData) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMessage_MessageData.ProtoReflect.Descriptor instead.
func (*CoreMessage_MessageData) Descriptor() ([]byte, []int) {
	return file_network_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CoreMessage_MessageData) GetMsgInfo() []byte {
	if x != nil {
		return x.MsgInfo
	}
	return nil
}

var File_network_service_proto protoreflect.FileDescriptor

var file_network_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x22,
	0x97, 0x0b, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0xa9, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x27, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x73, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x99, 0x05, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x4e, 0x44, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x53, 0x54, 0x54, 0x58, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x54, 0x43, 0x48, 0x50, 0x4f, 0x53, 0x54, 0x54, 0x58, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x54,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x53, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x08, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x53, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x54, 0x5f, 0x52,
	0x50, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x54,
	0x5f, 0x52, 0x50, 0x43, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x0c, 0x12,
	0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x54, 0x5f, 0x41,
	0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x53, 0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42,
	0x46, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4d, 0x53, 0x47, 0x10,
	0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42, 0x46, 0x54,
	0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x5f, 0x4d, 0x53,
	0x47, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x42,
	0x46, 0x54, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x4d, 0x53, 0x47, 0x10, 0x11, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x45, 0x57, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x44, 0x10, 0x12, 0x12, 0x0c,
	0x0a, 0x08, 0x4e, 0x45, 0x57, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c,
	0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x44, 0x53, 0x10, 0x14, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x49, 0x44, 0x53, 0x5f, 0x52,
	0x45, 0x53, 0x10, 0x15, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x53, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x17, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f,
	0x50, 0x45, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x45, 0x54, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x52, 0x45, 0x53,
	0x10, 0x19, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45, 0x54,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x53, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x54, 0x58, 0x53, 0x10, 0x1c, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x45, 0x54, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x54, 0x58, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x1d,
	0x22, 0xa6, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x4e, 0x4d, 0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x4d, 0x53, 0x47, 0x5f, 0x42, 0x4f,
	0x44, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x53, 0x45, 0x10, 0x05, 0x12, 0x18,
	0x0a, 0x14, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x07, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52,
	0x4d, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x45,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x45, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x0b, 0x22, 0x74, 0x0a, 0x08, 0x50, 0x65, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x32,
	0x4e, 0x0a, 0x0a, 0x70, 0x32, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x32, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x43, 0x6f,
	0x72, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42,
	0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x77, 0x6f,
	0x6f, 0x79, 0x61, 0x6e, 0x67, 0x32, 0x30, 0x31, 0x38, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_network_service_proto_rawDescOnce sync.Once
	file_network_service_proto_rawDescData = file_network_service_proto_rawDesc
)

func file_network_service_proto_rawDescGZIP() []byte {
	file_network_service_proto_rawDescOnce.Do(func() {
		file_network_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_service_proto_rawDescData)
	})
	return file_network_service_proto_rawDescData
}

var file_network_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_network_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_network_service_proto_goTypes = []interface{}{
	(CoreMessage_MessageType)(0),      // 0: protos.CoreMessage.MessageType
	(CoreMessage_ErrorType)(0),        // 1: protos.CoreMessage.ErrorType
	(*CoreMessage)(nil),               // 2: protos.CoreMessage
	(*PeerInfo)(nil),                  // 3: protos.PeerInfo
	(*CoreMessage_MessageHeader)(nil), // 4: protos.CoreMessage.MessageHeader
	(*CoreMessage_MessageData)(nil),   // 5: protos.CoreMessage.MessageData
}
var file_network_service_proto_depIdxs = []int32{
	4, // 0: protos.CoreMessage.Header:type_name -> protos.CoreMessage.MessageHeader
	5, // 1: protos.CoreMessage.Data:type_name -> protos.CoreMessage.MessageData
	3, // 2: protos.PeerInfo.peer:type_name -> protos.PeerInfo
	0, // 3: protos.CoreMessage.MessageHeader.type:type_name -> protos.CoreMessage.MessageType
	1, // 4: protos.CoreMessage.MessageHeader.errorType:type_name -> protos.CoreMessage.ErrorType
	2, // 5: protos.p2pService.SendP2pMessage:input_type -> protos.CoreMessage
	2, // 6: protos.p2pService.SendP2pMessage:output_type -> protos.CoreMessage
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_network_service_proto_init() }
func file_network_service_proto_init() {
	if File_network_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreMessage_MessageHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreMessage_MessageData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_network_service_proto_goTypes,
		DependencyIndexes: file_network_service_proto_depIdxs,
		EnumInfos:         file_network_service_proto_enumTypes,
		MessageInfos:      file_network_service_proto_msgTypes,
	}.Build()
	File_network_service_proto = out.File
	file_network_service_proto_rawDesc = nil
	file_network_service_proto_goTypes = nil
	file_network_service_proto_depIdxs = nil
}
