syntax = "proto3";
option go_package = "github.com/wooyang2018/corechain/protos";
package protos;

import "permission.proto";
import "chainbft.proto";

enum ResourceType {
  CPU = 0;
  MEMORY = 1;
  DISK = 2;
  // the fee used in kernel contract
  XFEE = 3;
}

message GasPrice {
  int64 cpu_rate = 1;
  int64 mem_rate = 2;
  int64 disk_rate = 3;
  int64 xfee_rate = 4;
}

message ResourceLimit {
  ResourceType type = 1;
  int64 limit = 2;
}

// 预执行的请求结构
message InvokeRequest {
  string module_name = 1;
  string contract_name = 2;
  string method_name = 3;
  map<string, bytes> args = 4;
  repeated ResourceLimit resource_limits = 5;
  // amount is the amount transfer to the contract
  // attention: In one transaction, transfer to only one contract is allowed
  string amount = 6;
}

// 预执行的返回结构
message InvokeResponse {
  repeated TxInputExt inputs = 1;
  repeated TxOutputExt outputs = 2;
  repeated bytes response = 3;
  int64 gas_used = 4;
  repeated InvokeRequest requests = 5;
  repeated ContractResponse responses = 6;
  repeated TxInput utxoInputs = 7;
  repeated TxOutput utxoOutputs = 8;
}

// ContractResponse is the response returnd by contract
message ContractResponse {
  int32 status = 1;
  string message = 2;
  bytes body = 3;
}

message WasmCodeDesc {
  string runtime = 1;
  string compiler = 2;
  bytes digest = 3;
  string vm_compiler = 4;
  string contract_type = 5;
}

message ContractEvent {
  string contract = 1;
  string name = 2;
  bytes body = 3;
}

message ContractStatData {
  int64 accountCount = 1;
  int64 contractCount = 2;
}

// Status of a contract
message ContractStatus {
  string contract_name = 1;
  string txid = 2;
  bytes desc = 3;
  bool is_banned = 4;
  int64 timestamp = 5;
  string runtime = 6;
}

message PingRequest {
}

message PingResponse {
}

message NativeCallRequest {
  // The context id of this request
  int64  ctxid = 1;
}

message NativeCallResponse {
}

message ArgPair {
  string key = 1;
  bytes value = 2;
}

message CallArgs {
  string method = 1;
  repeated ArgPair args = 2;
  string initiator = 3;
  repeated string auth_require = 4;
  string transfer_amount = 5;
  string caller = 6;
}

message SyscallHeader {
  int64 ctxid = 1;
}

message PutRequest {
  SyscallHeader header = 1;
  bytes key = 2;
  bytes value = 3;
}

message PutResponse {
}

message GetRequest {
  SyscallHeader header = 1;
  bytes key = 2;
}

message GetResponse {
  bytes value = 1;
}

message DeleteRequest {
  SyscallHeader header = 1;
  bytes key = 2;
}

message DeleteResponse {
}

message IteratorRequest {
  SyscallHeader header = 1;
  // start和limit为[start, limit)
  bytes start = 2;
  bytes limit = 3;
  // cap代表一次请求的最大IteratorItem个数，如果为0则采用xchain的默认配置
  int32 cap = 4;
}

message IteratorItem {
  bytes key = 1;
  bytes value = 2;
}

message IteratorResponse {
  repeated IteratorItem items = 1;
}

message QueryTxRequest {
  SyscallHeader header = 1;
  string txid = 2;
}

message QueryTxResponse {
  // defined in user code
  Transaction tx = 1;
}

message QueryBlockRequest {
  SyscallHeader header = 1;
  string blockid = 2;
}

message QueryBlockResponse {
  // defined in user code
  Block block = 1;
}

message TransferRequest {
  SyscallHeader header = 1;
  string from = 2;
  string to = 3;
  string amount = 4;
}

message TransferResponse {
}

message ContractCallRequest {
  SyscallHeader header = 1;
  string module = 2;
  string contract = 3;
  string method = 4;
  repeated ArgPair args = 5;
}

message ContractCallResponse {
  Response response = 1;
}

message CrossContractQueryRequest {
  SyscallHeader header = 1;
  string uri = 2;
  repeated ArgPair args = 5;
}

message CrossContractQueryResponse {
  Response response = 1;
}

message Response {
  int32  status = 1;
  string message = 2;
  bytes  body = 3;
}

message SetOutputRequest {
  SyscallHeader header = 1;
  Response response = 2;
}

message SetOutputResponse {
}

message GetCallArgsRequest {
  SyscallHeader header = 1;
}

// 扩展输入
message TxInputExt {
  string bucket = 1;
  bytes key = 2;
  bytes ref_txid = 3;
  int32 ref_offset = 4;
}

// 扩展输出
message TxOutputExt {
  string bucket = 1;
  bytes key = 2;
  bytes value = 3;
}

// Transaction input
message TxInput {
  // The transaction id referenced to
  bytes ref_txid = 1;
  // The output offset of the transaction referenced to
  int32 ref_offset = 2;
  // The address of the launcher
  bytes from_addr = 5;
  // The amount of the transaction
  bytes amount = 6;
  // Frozen height
  int64 frozen_height = 7;
}

// Transaction output
message TxOutput {
  // The amount of the transaction
  bytes amount = 1;
  // The address of the launcher
  bytes to_addr = 2;
  // Fronzen height
  int64 frozen_height = 4;
}

// The block struct
message Block {
  // blockid generate the hash sign of the block used by sha256
  string blockid = 3;
  // pre_hash is the parent blockid of the block
  string pre_hash = 4;
  // The miner id
  bytes proposer = 5;
  // The sign which miner signed: blockid + nonce + timestamp
  string sign = 6;
  // The pk of the miner
  bytes pubkey = 7;
  // The height of the blockchain
  int64 height = 9;
  // Timestamp of the block
  int64 timestamp = 10;
  // Transactions of the block, only txid stored on kv, the detail information stored in another table
  repeated string txids = 11;
  // The transaction count of the block
  int32 tx_count = 12;
  //下面的属性会动态变化
  // If the block is on the trunk
  bool in_trunk = 14;
  // Next next block which on trunk
  string next_hash = 15;
}

message GetAccountAddressesRequest{
  SyscallHeader header = 1;
  string account = 2;
}

message GetAccountAddressesResponse {
  repeated string addresses = 1;
}

message PostLogRequest {
  SyscallHeader header = 1;
  string entry = 2;
}

message PostLogResponse {
  string entry = 1;
}

message EmitEventRequest {
  SyscallHeader header = 1;
  string name = 2;
  bytes body = 3;
}

message EmitEventResponse {
}

// TransactionStatus is the status of transaction
enum TransactionStatus {
  // Undefined status
  TX_UNDEFINE = 0;
  // Transaction not exist
  TX_NOEXIST = 1;
  // Transaction have been confirmed
  TX_CONFIRM = 2;
  // Transaction is on the furcation
  TX_FURCATION = 3;
  // Transaction have not been confirmed
  TX_UNCONFIRM = 4;
  // Transaction occurs error
  TX_FAILED = 5;
}

// BlockStatus is the status of block
enum BlockStatus {
  BLOCK_ERROR = 0;
  BLOCK_TRUNK = 1;
  BLOCK_BRANCH = 2;
  BLOCK_NOEXIST = 3;
}

message HDInfo {
  // HDPublickey
  bytes hd_public_key = 1;
  // original_hash
  bytes original_hash = 2;
}

// Unified Xuper Signature
message XuperSignature {
  repeated bytes public_keys = 1;
  bytes signature = 2;
}

// Transaction is the information of the transaction
message Transaction {
  // txid is the id of this transaction
  bytes txid = 1;
  // the blockid the transaction belong to
  bytes blockid = 2;
  // Transaction input list
  repeated TxInput tx_inputs = 3;
  // Transaction output list
  repeated TxOutput tx_outputs = 4;
  // Transaction description or system contract
  bytes desc = 6;
  // Mining rewards
  bool coinbase = 7;
  // Random number used to avoid replay attacks
  string nonce = 8;
  // Timestamp to launch the transaction
  int64 timestamp = 9;
  // tx format version; tx格式版本号
  int32 version = 10;
  // auto generated tx
  bool autogen = 11;

  repeated TxInputExt tx_inputs_ext = 23;
  repeated TxOutputExt tx_outputs_ext = 24;
  repeated InvokeRequest contract_requests = 25;

  // 权限系统新增字段
  // 交易发起者, 可以是一个Address或者一个Account
  string initiator = 26;
  // 交易发起需要被收集签名的AddressURL集合信息，包括用于utxo转账和用于合约调用
  repeated string auth_require = 27;
  // 交易发起者对交易元数据签名，签名的内容包括auth_require字段
  repeated SignatureInfo initiator_signs = 28;
  // 收集到的签名
  repeated SignatureInfo auth_require_signs = 29;
  // 节点收到tx的时间戳，不参与签名
  int64 received_timestamp = 30;
  // 统一签名(支持多重签名/环签名等，与initiator_signs/auth_require_signs不同时使用)
  XuperSignature xuper_sign = 31;
  // 可修改区块链标记
  ModifyBlock modify_block = 32;
  // HD加解密相关信息
  HDInfo HD_info = 33;
}

// Ledger metadata
message LedgerMeta {
  // root block id
  bytes root_blockid = 1;
  // tip block id
  bytes tip_blockid = 2;
  // the height of the trunk
  int64 trunk_height = 3;
}

// Utxo metadata
message UtxoMeta {
  // utxo vm目前执行到的blockid
  bytes latest_blockid = 1;
  repeated string lock_key_list = 2;
  // 当前utxo vm上的总资产
  string utxo_total = 3;
  // 平均上链延时
  int64 avgDelay = 4;
  // 待确认交易量
  int64 unconfirmTxAmount = 5;
  // max block size
  int64 max_block_size = 6;
  // preset contracts
  repeated InvokeRequest reserved_contracts = 7;
  // reset forbidden contract configuration
  InvokeRequest forbidden_contract = 8;
  // the resource amount of creating an account
  int64 new_account_resource_amount = 9;
  // 当前不可逆区块高度，与utxo对齐
  int64 irreversibleBlockHeight = 10;
  // 当前不可逆区块高度调整窗口
  int64 irreversibleSlideWindow = 11;
  GasPrice gasPrice = 12;
  // 群组合约相关
  InvokeRequest group_chain_contract = 13;
}

// The internal block struct
message InternalBlock {
  // block version
  int32 version = 1;
  // Random number used to avoid replay attacks
  int32 nonce = 2;
  // blockid generate the hash sign of the block used by sha256
  bytes blockid = 3;
  // pre_hash is the parent blockid of the block
  bytes pre_hash = 4;
  // The miner id
  bytes proposer = 5;
  // The sign which miner signed: blockid + nonce + timestamp
  bytes sign = 6;
  // The pk of the miner
  bytes pubkey = 7;
  // The Merkle Tree root
  bytes merkle_root = 8;
  // The height of the blockchain
  int64 height = 9;
  // Timestamp of the block
  int64 timestamp = 10;
  // Transactions of the block, only txid stored on kv, the detail information
  // stored in another table
  repeated Transaction transactions = 11;
  // The transaction count of the block
  int32 tx_count = 12;
  // 所有交易hash的merkle tree
  repeated bytes merkle_tree = 13;
  int64 curTerm = 16;
  int64 curBlockNum = 17;
  map<string, string> failed_txs = 18; // txid -> failed reason
  int32 targetBits = 19;
  // Justify used in chained-bft
  QuorumCert Justify = 20;
  // 下面的属性会动态变化
  // If the block is on the trunk
  bool in_trunk = 14;
  // Next next block which on trunk
  bytes next_hash = 15;
}

message Utxo {
  bytes amount = 1;
  bytes toAddr = 2;
  bytes toPubkey = 3;
  bytes refTxid = 4;
  int32 refOffset = 5;
}

message ModifyBlock {
  // txid交易被effective_txid的交易提出可修改区块链的请求
  string effective_txid = 1;
  // 本交易是否已被修改标记
  bool marked = 2;
  // txid交易被修改生效的高度
  int64 effective_height = 3;
  // 监管的public key
  string public_key = 4;
  // 监管地址对修改的交易id的签名
  string sign = 5;
}

message TxDataAccount {
  // 地址
  string address = 1;
  // 金额
  string amount = 2;
  // 冻结高度
  int64 frozen_height = 3;
}

message UtxoRecord {
  string utxoCount = 1;
  string utxoAmount = 2;
  repeated UtxoKey item = 3;
}

message UtxoKey {
  string refTxid = 1;
  string offset = 2;
  string amount = 3;
}

message UtxoRecordDetail {
  UtxoRecord openUtxo = 1;
  UtxoRecord lockedUtxo = 2;
  UtxoRecord frozenUtxo = 3;
}

message BalanceDetailInfo {
  string balance = 1;
  bool isFrozen = 2;
}

// UtxoOutput query results
message UtxoOutput {
  // utxo list
  repeated Utxo utxoList = 1;
  // total selected amount
  string totalSelected = 2;
}

